// Code generated by mockery v2.44.1. DO NOT EDIT.

package aiservice_mock

import (
	context "context"

	entities "github.com/harnyk/listman/pkg/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockIAiService is an autogenerated mock type for the IAiService type
type MockIAiService struct {
	mock.Mock
}

type MockIAiService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAiService) EXPECT() *MockIAiService_Expecter {
	return &MockIAiService_Expecter{mock: &_m.Mock}
}

// GetTextFromVoice provides a mock function with given fields: ctx, url, fileName
func (_m *MockIAiService) GetTextFromVoice(ctx context.Context, url string, fileName string) (string, error) {
	ret := _m.Called(ctx, url, fileName)

	if len(ret) == 0 {
		panic("no return value specified for GetTextFromVoice")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, url, fileName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, url, fileName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, url, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAiService_GetTextFromVoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTextFromVoice'
type MockIAiService_GetTextFromVoice_Call struct {
	*mock.Call
}

// GetTextFromVoice is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
//   - fileName string
func (_e *MockIAiService_Expecter) GetTextFromVoice(ctx interface{}, url interface{}, fileName interface{}) *MockIAiService_GetTextFromVoice_Call {
	return &MockIAiService_GetTextFromVoice_Call{Call: _e.mock.On("GetTextFromVoice", ctx, url, fileName)}
}

func (_c *MockIAiService_GetTextFromVoice_Call) Run(run func(ctx context.Context, url string, fileName string)) *MockIAiService_GetTextFromVoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIAiService_GetTextFromVoice_Call) Return(_a0 string, _a1 error) *MockIAiService_GetTextFromVoice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAiService_GetTextFromVoice_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *MockIAiService_GetTextFromVoice_Call {
	_c.Call.Return(run)
	return _c
}

// ParseShoppingList provides a mock function with given fields: ctx, message
func (_m *MockIAiService) ParseShoppingList(ctx context.Context, message string) (*entities.ShoppingList, error) {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for ParseShoppingList")
	}

	var r0 *entities.ShoppingList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.ShoppingList, error)); ok {
		return rf(ctx, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.ShoppingList); ok {
		r0 = rf(ctx, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ShoppingList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAiService_ParseShoppingList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseShoppingList'
type MockIAiService_ParseShoppingList_Call struct {
	*mock.Call
}

// ParseShoppingList is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
func (_e *MockIAiService_Expecter) ParseShoppingList(ctx interface{}, message interface{}) *MockIAiService_ParseShoppingList_Call {
	return &MockIAiService_ParseShoppingList_Call{Call: _e.mock.On("ParseShoppingList", ctx, message)}
}

func (_c *MockIAiService_ParseShoppingList_Call) Run(run func(ctx context.Context, message string)) *MockIAiService_ParseShoppingList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIAiService_ParseShoppingList_Call) Return(_a0 *entities.ShoppingList, _a1 error) *MockIAiService_ParseShoppingList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAiService_ParseShoppingList_Call) RunAndReturn(run func(context.Context, string) (*entities.ShoppingList, error)) *MockIAiService_ParseShoppingList_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAiService creates a new instance of MockIAiService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAiService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAiService {
	mock := &MockIAiService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
