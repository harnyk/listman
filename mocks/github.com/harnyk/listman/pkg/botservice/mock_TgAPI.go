// Code generated by mockery v2.44.1. DO NOT EDIT.

package botservice_mock

import (
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	mock "github.com/stretchr/testify/mock"
)

// MockTgAPI is an autogenerated mock type for the TgAPI type
type MockTgAPI struct {
	mock.Mock
}

type MockTgAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTgAPI) EXPECT() *MockTgAPI_Expecter {
	return &MockTgAPI_Expecter{mock: &_m.Mock}
}

// GetFileDirectURL provides a mock function with given fields: fileID
func (_m *MockTgAPI) GetFileDirectURL(fileID string) (string, error) {
	ret := _m.Called(fileID)

	if len(ret) == 0 {
		panic("no return value specified for GetFileDirectURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(fileID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(fileID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTgAPI_GetFileDirectURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileDirectURL'
type MockTgAPI_GetFileDirectURL_Call struct {
	*mock.Call
}

// GetFileDirectURL is a helper method to define mock.On call
//   - fileID string
func (_e *MockTgAPI_Expecter) GetFileDirectURL(fileID interface{}) *MockTgAPI_GetFileDirectURL_Call {
	return &MockTgAPI_GetFileDirectURL_Call{Call: _e.mock.On("GetFileDirectURL", fileID)}
}

func (_c *MockTgAPI_GetFileDirectURL_Call) Run(run func(fileID string)) *MockTgAPI_GetFileDirectURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTgAPI_GetFileDirectURL_Call) Return(_a0 string, _a1 error) *MockTgAPI_GetFileDirectURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTgAPI_GetFileDirectURL_Call) RunAndReturn(run func(string) (string, error)) *MockTgAPI_GetFileDirectURL_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: c
func (_m *MockTgAPI) Send(c tgbotapi.Chattable) (tgbotapi.Message, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 tgbotapi.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(tgbotapi.Chattable) (tgbotapi.Message, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(tgbotapi.Chattable) tgbotapi.Message); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(tgbotapi.Message)
	}

	if rf, ok := ret.Get(1).(func(tgbotapi.Chattable) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTgAPI_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockTgAPI_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - c tgbotapi.Chattable
func (_e *MockTgAPI_Expecter) Send(c interface{}) *MockTgAPI_Send_Call {
	return &MockTgAPI_Send_Call{Call: _e.mock.On("Send", c)}
}

func (_c *MockTgAPI_Send_Call) Run(run func(c tgbotapi.Chattable)) *MockTgAPI_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(tgbotapi.Chattable))
	})
	return _c
}

func (_c *MockTgAPI_Send_Call) Return(_a0 tgbotapi.Message, _a1 error) *MockTgAPI_Send_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTgAPI_Send_Call) RunAndReturn(run func(tgbotapi.Chattable) (tgbotapi.Message, error)) *MockTgAPI_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTgAPI creates a new instance of MockTgAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTgAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTgAPI {
	mock := &MockTgAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
